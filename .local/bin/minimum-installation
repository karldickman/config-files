#!/usr/bin/python

from apt import Cache

def main():
    global cache
    cache = Cache()
    required = set()
    implicit = set()
    for package in cache:
        if package.installed is not None:
            if package.name not in implicit:
                required.add(package.name)
                dependencies = all_dependencies(package, implicit)
                required -= dependencies
                implicit.update(dependencies)
    for package in required:
        print package, "install"

def all_dependencies(package, checked=None):
    global cache
    if checked is None:
        checked = set()
    checked.add(package.name)
    nearest = package.installed.dependencies
    found = set()
    if len(nearest) == 0:
        return found
    for dependency in nearest:
        for dep2 in dependency.or_dependencies:
            name = dep2.name
            if name not in cache:
                continue
            elif name not in checked:
                new_package = cache[name]
                if new_package.installed is None:
                    continue
                found.add(name)
                found.update(all_dependencies(new_package, checked))
                break
        else:
            found.add(dependency.or_dependencies[0].name)
    return found

if __name__ == "__main__":
    main()
